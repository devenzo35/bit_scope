# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17seq-eMZ90vReuTCq0x3gd6WFYFARb2b
"""

!pip install asyncpraw > /dev/null

import asyncpraw
from datetime import datetime, date, timedelta
import pandas as pd
import json

from google.colab import userdata

reddit = asyncpraw.Reddit(
    client_id = userdata.get('REDDIS_CLIENT_ID'),
    client_secret = userdata.get('REDDIS_CLIENT_SECRET'),
    user_agent = userdata.get('USER_AGENT')
)

subreddits = await reddit.subreddit('Bitcoin+btc+CryptoCurrency')

def safe_attr(obj, attr):
  return getattr(obj, attr, None)

def extract_submission_data(submission):
    """
    Extract all relevant fields from a PRAW submission object
    and return as a Python dictionary.
    """
    return {
        "id": submission.id,
        "name": submission.name,
        "title": submission.title,
        "selftext": submission.selftext,
        "author": str(submission.author) if submission.author else None,
        "author_flair_text": submission.author_flair_text,
        "clicked": submission.clicked,
        "comments_count": submission.num_comments,
        "distinguished": submission.distinguished,
        "edited": submission.edited,
        "is_original_content": submission.is_original_content,
        "is_self": submission.is_self,
        "link_flair_template_id": safe_attr(submission, 'link_flair_template_id'),
        "link_flair_text": submission.link_flair_text,
        "locked": submission.locked,
        "over_18": submission.over_18,
        "permalink": submission.permalink,
        #"poll_data": safe_attr(submission, 'poll_data'),
        "saved": submission.saved,
        "score": submission.score,
        "spoiler": submission.spoiler,
        "stickied": submission.stickied,
        "subreddit": str(submission.subreddit) if submission.subreddit else None,
        "upvote_ratio": submission.upvote_ratio,
        "url": submission.url,
        "created_utc": submission.created_utc
    }

async def get_submission_data():

  posts = []
  async for submission in subreddits.new(limit=1000):
    posts.append(extract_submission_data(submission))
  return posts

data = await get_submission_data()
data

json.dumps(data, indent=4)

# use query and loc